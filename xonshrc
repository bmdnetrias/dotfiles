from pathlib import Path

xontrib load powerline2
xontrib load vox
xontrib load autovox
xontrib load homebrew
xontrib load pyenv

source-bash ~/.bashrc

$PATH.insert(0, str(Path($HOME) / ".local" / "bin"))

def conch_symbol(sample=False):
    return [ u" xonsh \U0001F41A", "WHITE", "#555" ]

@events.autovox_policy
def dotvenv_policy(path, **_):
    venv = path / '.venv'
    if venv.exists():
        return venv
	
$PL_EXTRA_SEC["conch"] = conch_symbol
$PL_PROMPT = u"conch>short_cwd>rtns"

pl_build_prompt

# neofetch
neowofetch


# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# if !(test -f "/opt/anaconda3/bin/conda"):
#     import sys as _sys
#     from types import ModuleType as _ModuleType
#     _mod = _ModuleType("xontrib.conda",
#                     "Autogenerated from $(/opt/anaconda3/bin/conda shell.xonsh hook)")
#     __xonsh__.execer.exec($("/opt/anaconda3/bin/conda" "shell.xonsh" "hook"),
#                         glbs=_mod.__dict__,
#                         filename="$(/opt/anaconda3/bin/conda shell.xonsh hook)")
#     _sys.modules["xontrib.conda"] = _mod
#     del _sys, _mod, _ModuleType
# # <<< conda initialize <<<

